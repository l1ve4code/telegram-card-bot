from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler
from telegram.ext import filters
import sqlite3
import os
import time

def create_database():
    conn = sqlite3.connect('discount_cards.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            photo TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_database()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
    üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–∫–∏–¥–æ—á–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏!* üåü
    
    üì∏ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*
    1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *–æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* –≤–∞—à–µ–π —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã.
    2. –ü—Ä–∏—Å–≤–æ–π—Ç–µ –∫–∞—Ä—Ç–µ *—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è*, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –µ—ë –Ω–∞–π—Ç–∏.
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list`, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã.
    4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –µ—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.
    
    üí° *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
    - üõçÔ∏è –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å —Å–∫–∏–¥–∫–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∫–æ–ª–ª–µ–≥–∞–º–∏.
    - üìÇ –£–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
    - üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç—ã.
    
    üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    - `/start` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    - `/list` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç.
    
    üöÄ *–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã.
    """
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    timestamp = int(time.time())
    photo_path = f"photos/{user_id}_{timestamp}.jpg"

    photo_file = await update.message.photo[-1].get_file()
    os.makedirs("photos", exist_ok=True)
    await photo_file.download_to_drive(photo_path)

    conn = sqlite3.connect('discount_cards.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO cards (user_id, photo)
        VALUES (?, ?)
    ''', (user_id, photo_path))
    conn.commit()
    conn.close()

    await update.message.reply_text("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.")

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    name = update.message.text

    conn = sqlite3.connect('discount_cards.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE cards
        SET name = ?
        WHERE user_id = ? AND name IS NULL
    ''', (name, user_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"‚úÖ –ò–º—è '{name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ.")

async def list_cards(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('discount_cards.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, name FROM cards')
    cards = cursor.fetchall()
    conn.close()

    if not cards:
        await update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç.")
    else:
        keyboard = [
            [InlineKeyboardButton(card[1], callback_data=f"card_{card[0]}")] for card in cards
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=reply_markup)

async def handle_card_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    card_id = int(query.data.split("_")[1])

    conn = sqlite3.connect('discount_cards.db')
    cursor = conn.cursor()
    cursor.execute('SELECT photo FROM cards WHERE id = ?', (card_id,))
    card = cursor.fetchone()
    conn.close()

    if not card:
        await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await query.message.reply_photo(open(card[0], 'rb'))

def main():
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_cards))

    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))

    application.add_handler(CallbackQueryHandler(handle_card_selection))

    application.run_polling()

if __name__ == '__main__':
    main()