from telegram import LabeledPrice, Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters, \
    CallbackQueryHandler
import sqlite3
import os
import time
from os import environ
from datetime import datetime, timedelta
import textwrap

DATABASE_PATH = os.path.join("data", "discount_cards.db")

def create_database():
    os.makedirs("data", exist_ok=True)
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            name TEXT,
            photo TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_use TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_use TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS card_stats (
            card_id INTEGER PRIMARY KEY,
            selection_count INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS premium_users (
            user_id INTEGER PRIMARY KEY,
            premium_until TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

create_database()

def has_premium_access(user_id):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT premium_until FROM premium_users WHERE user_id = ? AND premium_until >= CURRENT_TIMESTAMP
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def update_user_stats(user_id):
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (user_id) VALUES (?)
    ''', (user_id,))
    cursor.execute('''
        UPDATE users SET last_use = CURRENT_TIMESTAMP WHERE user_id = ?
    ''', (user_id,))
    conn.commit()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    update_user_stats(update.message.from_user.id)
    welcome_text = textwrap.dedent("""
        üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª—É–± —Å–∫–∏–¥–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç!* üåü

        üì∏ *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*
        1. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã.
        2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ *–æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* –≤–∞—à–µ–π —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã.
        3. –ü—Ä–∏—Å–≤–æ–π—Ç–µ –∫–∞—Ä—Ç–µ *—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è*, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –µ—ë –Ω–∞–π—Ç–∏.
        4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /list, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã.
        5. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –µ—ë —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.

        üí° *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞:*
        - üõçÔ∏è –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å —Å–∫–∏–¥–∫–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∫–æ–ª–ª–µ–≥–∞–º–∏.
        - üìÇ –£–¥–æ–±–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.
        - üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç—ã.

        üìå *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
        - /start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        - /list - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã.
        - /buy - –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø.
    """).strip()
    await update.message.reply_text(welcome_text, parse_mode="Markdown")

async def start_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    title = "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞"
    description = "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
    payload = "premium_subscription"
    provider_token = ""
    currency = "XTR"
    prices = [LabeledPrice("–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø", 300)]

    await context.bot.send_invoice(
        chat_id,
        title,
        description,
        payload,
        provider_token,
        currency,
        prices,
    )

async def pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload == "premium_subscription":
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞")

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    premium_until = datetime.now() + timedelta(days=30)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO premium_users (user_id, premium_until) VALUES (?, ?)
    ''', (user_id, premium_until))
    conn.commit()
    conn.close()

    await update.message.reply_text("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –º–µ—Å—è—Ü.")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not has_premium_access(user_id):
        await update.message.reply_text("‚ùå –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy.")
        return

    update_user_stats(user_id)

    timestamp = int(time.time())
    photo_path = f"photos/{user_id}_{timestamp}.jpg"

    photo_file = await update.message.photo[-1].get_file()
    os.makedirs("photos", exist_ok=True)
    await photo_file.download_to_drive(photo_path)

    context.user_data['photo_path'] = photo_path

    await update.message.reply_text("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.")

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not has_premium_access(user_id):
        await update.message.reply_text("‚ùå –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy.")
        return

    name = update.message.text.strip()
    name_lower = name.lower()

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM cards WHERE LOWER(name) = ?', (name_lower,))
    existing_card = cursor.fetchone()

    if existing_card:
        card_id = existing_card[0]
        cursor.execute('''
            UPDATE cards
            SET user_id = ?, photo = ?
            WHERE id = ?
        ''', (user_id, context.user_data['photo_path'], card_id))
        await update.message.reply_text(f"‚úÖ –ö–∞—Ä—Ç–∞ '{name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        cursor.execute('''
            INSERT INTO cards (user_id, name, photo)
            VALUES (?, ?, ?)
        ''', (user_id, name, context.user_data['photo_path']))
        await update.message.reply_text(f"‚úÖ –ò–º—è '{name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ.")

    conn.commit()
    conn.close()

async def list_cards(update_or_query, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    if isinstance(update_or_query, CallbackQuery):
        user_id = update_or_query.from_user.id
        send_method = update_or_query.edit_message_text
    else:
        user_id = update_or_query.from_user.id
        send_method = update_or_query.reply_text

    if not has_premium_access(user_id):
        await send_method("‚ùå –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy.")
        return

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT id, name FROM cards
        WHERE id IN (SELECT MAX(id) FROM cards GROUP BY LOWER(name))
        LIMIT 10 OFFSET ?
    ''', (page * 10,))
    cards = cursor.fetchall()
    conn.close()

    if not cards:
        await send_method("üì≠ –ë–æ–ª—å—à–µ –∫–∞—Ä—Ç –Ω–µ—Ç.")
        return

    keyboard = [
        [InlineKeyboardButton(card[1], callback_data=f"card_{card[0]}")] for card in cards
    ]

    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data=f"list_{page - 1}"))
    if len(cards) == 10:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚Üí", callback_data=f"list_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_method(
        f"üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:",
        reply_markup=reply_markup
    )

async def handle_list_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("list_"):
        page = int(query.data.split("_")[1])
        await list_cards(query, context, page)
    else:
        await handle_card_selection(update, context)

async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await update.message.reply_text(f"üÜî –í–∞—à user_id: {user_id}")

async def grant_premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /grant_premium <user_id> <–ø–∞—Ä–æ–ª—å>")
        return

    user_id = context.args[0]
    password = context.args[1]
    admin_password = environ.get("ADMIN_PASSWORD")

    if password != admin_password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    premium_until = datetime.now() + timedelta(days=30)

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO premium_users (user_id, premium_until) VALUES (?, ?)
    ''', (user_id, premium_until))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id {user_id} –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü.")

async def delete_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or len(context.args) < 2:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /delete <–∏–º—è_–∫–∞—Ä—Ç—ã> <–ø–∞—Ä–æ–ª—å>")
        return

    card_name = " ".join(context.args[:-1])
    password = context.args[-1]
    admin_password = environ.get("ADMIN_PASSWORD")

    if password != admin_password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM cards WHERE LOWER(name) = LOWER(?)', (card_name,))
    deleted_rows = cursor.rowcount
    conn.commit()
    conn.close()

    if deleted_rows > 0:
        await update.message.reply_text(f"‚úÖ –ö–∞—Ä—Ç–∞ '{card_name}' —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚ùå –ö–∞—Ä—Ç–∞ '{card_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
        return

    user_password = context.args[0]
    admin_password = environ.get("ADMIN_PASSWORD")

    if user_password != admin_password:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")
        return

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()

    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM cards')
    users_with_cards = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM cards')
    total_cards = cursor.fetchone()[0]

    avg_cards_per_user = total_cards / users_with_cards if users_with_cards > 0 else 0

    retention_period = 7
    retention_date = datetime.now() - timedelta(days=retention_period)
    cursor.execute('''
        SELECT COUNT(DISTINCT user_id) FROM users
        WHERE last_use >= ?
    ''', (retention_date,))
    retained_users = cursor.fetchone()[0]
    retention_rate = (retained_users / total_users) * 100 if total_users > 0 else 0

    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM users WHERE last_use >= DATE("now", "-7 days")')
    active_users_last_7_days = cursor.fetchone()[0]

    cursor.execute('SELECT COUNT(*) FROM users WHERE first_use >= DATE("now", "-7 days")')
    new_users_last_7_days = cursor.fetchone()[0]

    conversion_rate = (users_with_cards / total_users) * 100 if total_users > 0 else 0

    cursor.execute('SELECT AVG(JULIANDAY(last_use) - JULIANDAY(first_use)) FROM users')
    avg_usage_duration = cursor.fetchone()[0] or 0

    cursor.execute('''
        SELECT c.name, COALESCE(cs.selection_count, 0) as selection_count 
        FROM cards c
        LEFT JOIN card_stats cs ON c.id = cs.card_id
        ORDER BY selection_count DESC
        LIMIT 5
    ''')
    top_cards = cursor.fetchall()

    cursor.execute('SELECT COUNT(*) FROM cards WHERE created_at >= DATE("now", "-7 days")')
    cards_last_7_days = cursor.fetchone()[0]

    cursor.execute('''
        SELECT AVG(card_count) 
        FROM (
            SELECT user_id, COUNT(*) as card_count 
            FROM cards 
            GROUP BY user_id
        )
    ''')
    avg_cards_per_active_user = cursor.fetchone()[0] or 0

    cursor.execute('SELECT COUNT(DISTINCT user_id) FROM premium_users')
    premium_users = cursor.fetchone()[0]

    premium_conversion = (premium_users / total_users) * 100 if total_users > 0 else 0

    cursor.execute('SELECT COUNT(*) FROM premium_users WHERE premium_until >= CURRENT_TIMESTAMP')
    active_premium_users = cursor.fetchone()[0]

    stats_text = textwrap.dedent(f"""
        üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:*

        üë§ *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}
        üìÇ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Ä—Ç–∞–º–∏:* {users_with_cards}
        üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ–º–∏—É–º–æ–º: {premium_users}
        üöÄ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—Ä–µ–º–∏—É–º: {premium_conversion:.2f}%
        üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–æ–∫: {active_premium_users}
        
        üì¶ *–í—Å–µ–≥–æ –∫–∞—Ä—Ç:* {total_cards}
        üìà *–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {avg_cards_per_user:.2f}
        üìÖ *Retention rate (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):* {retention_rate:.2f}%

        üöÄ *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):* {active_users_last_7_days}
        üÜï *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π):* {new_users_last_7_days}
        üîÑ *–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç:* {conversion_rate:.2f}%
        ‚è≥ *–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:* {avg_usage_duration:.2f} –¥–Ω–µ–π

        üèÜ *–¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ä—Ç:*
    """).strip()

    for i, (name, count) in enumerate(top_cards, start=1):
        stats_text += f"\n  {i}. {name} (–≤—ã–±—Ä–∞–Ω–∞ {count} —Ä–∞–∑)"

    stats_text += textwrap.dedent(f"""
        üìÖ *–ö–∞—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:* {cards_last_7_days}
        üì¶ *–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {avg_cards_per_active_user:.2f}
    """).strip()

    await update.message.reply_text(stats_text, parse_mode="Markdown")

    conn.close()

async def handle_card_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    card_id = int(query.data.split("_")[1])

    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO card_stats (card_id) VALUES (?)
    ''', (card_id,))
    cursor.execute('''
        UPDATE card_stats SET selection_count = selection_count + 1 WHERE card_id = ?
    ''', (card_id,))
    conn.commit()

    cursor.execute('SELECT photo FROM cards WHERE id = ?', (card_id,))
    card = cursor.fetchone()
    conn.close()

    if not card:
        await query.edit_message_text("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await query.message.reply_photo(open(card[0], 'rb'))

def main():
    bot_token = environ.get("BOT_TOKEN")
    if not bot_token:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    application = Application.builder().token(bot_token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", lambda u, c: list_cards(u.message, c, page=0)))
    application.add_handler(CommandHandler("buy", start_payment))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("myid", my_id))
    application.add_handler(CommandHandler("grant_premium", grant_premium))
    application.add_handler(CommandHandler("delete", delete_card))

    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))

    application.add_handler(PreCheckoutQueryHandler(pre_checkout))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    application.add_handler(CallbackQueryHandler(handle_list_pagination))

    application.run_polling()

if __name__ == '__main__':
    main()